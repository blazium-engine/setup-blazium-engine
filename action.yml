name: 'Blazium Setup'

description: 'Setup Blazium Engine for use with macOS, Windows, and Linux CI/CD runners.'

author: 'blazium-engine'
branding:
  icon: 'hard-drive'
  color: 'white'
inputs:
  version:
    description: 'Blazium Engine version: e.g., 0.1.184, 0.1.188, etc. Must include major, minor, and patch.'
    required: true
  bin-path:
    description: 'Path for binaries to be installed to, relative to the current working directory of the action. This is the path that will be added to the system path.'
    default: 'bin'
  arch:
    description: 'Specify the architecture (e.g., x86_64, arm64, arm32, 32bit, 64bit).'
    default: ''
  platform:
    description: 'Specify the platform (e.g., linux, windows, macos).'
    default: ''
  download_editor:
    description: 'Download Blazium CLI Editor'
    default: 'true'
  download_template:
    description: 'Download Blazium CLI Template'
    default: 'false'
  download_mono:
    description: 'Download Blazium Mono Version'
    default: 'false'
  use-cache:
    description: 'Use cache'
    default: 'true'
  
runs:
  using: composite
  steps:
    - uses: blazium-engine/setup-blazium-cli@master
      name: ðŸ¤– Setup Blazium CLI
      with:
        version: 0.0.14
    
    - name: Get latest if specified
      shell: bash
      run: |
        API_URL="https://blazium.app/api/download-options/editor"

        # Fetch the JSON data from the API
        json_data=$(curl -s "$API_URL")

        if [ -z "$json_data" ]; then
            echo "Error: Failed to fetch data from the API" >&2
            exit 1
        fi

        # Parse the input argument
        input=${{ inputs.version }}

        # Extract channel if specified
        channel=""
        version_filter=""
        if [[ $input == latest-* ]]; then
            rest=${input#latest-}
            
            # Check if it's a channel specification
            if [[ $rest == nightly ]] || [[ $rest == release ]]; then
                channel=$rest
            elif [[ $rest == *-* ]]; then
                # Has both channel and version filter
                channel=${rest%%-*}
                version_filter=${rest#*-}
            else
                # Just version filter
                version_filter=$rest
            fi
        elif [[ ! "$input" =~ latest ]]; then
            echo "version_latest=$input" >> $GITHUB_ENV
            exit 0
        fi

        # Function to get the latest version from a list
        get_latest_version() {
            local versions=$1
            local filter=$2
            local is_nightly=$3
            
            if [ -n "$filter" ]; then
                if [[ $filter =~ ^[0-9]+$ ]]; then
                    # Major version filter (e.g., 0)
                    filtered_versions=$(echo "$versions" | jq -r ".[] | select(startswith(\"${filter}.\"))")
                elif [[ $filter =~ ^[0-9]+\.[0-9]+$ ]]; then
                    # Major.minor version filter (e.g., 0.4)
                    filtered_versions=$(echo "$versions" | jq -r ".[] | select(startswith(\"${filter}.\"))")
                else
                    echo "Invalid version filter format: $filter" >&2
                    exit 1
                fi
            else
                filtered_versions=$(echo "$versions" | jq -r ".[]")
            fi
            
            if [ -z "$filtered_versions" ]; then
                echo "No versions found matching the filter" >&2
                exit 1
            fi
            
            # Sort versions in descending order and pick the first one
            latest=$(echo "$filtered_versions" | sort -V -r | head -n 1)
            
            # Append -nightly if it's a nightly version
            if [ "$is_nightly" = true ]; then
                echo "${latest}-nightly"
            else
                echo "$latest"
            fi
        }

        # Get versions based on channel
        if [ -z "$channel" ] || [ "$channel" = "nightly" ]; then
            nightly_versions=$(echo "$json_data" | jq -r '.versions.nightly[]')
        fi

        if [ -z "$channel" ] || [ "$channel" = "release" ]; then
            release_versions=$(echo "$json_data" | jq -r '.versions.release[]')
        fi

        # Process versions
        if [ -z "$channel" ]; then
            # Compare across both channels
            all_versions=$(echo -e "$nightly_versions\n$release_versions")
            latest_raw=$(get_latest_version "$(echo "$all_versions" | jq -R . | jq -s .)" "$version_filter" false)
            
            # Check if the latest version is from nightly or release
            if echo "$nightly_versions" | grep -q "^$latest_raw$"; then
                echo "${latest_raw}-nightly"
                echo "version_latest=${latest_raw}-nightly" >> $GITHUB_ENV
            else
                echo "$latest_raw"
                echo "version_latest=$latest_raw" >> $GITHUB_ENV
            fi
        else
            # Process specific channel
            if [ "$channel" = "nightly" ]; then
                latest_nightly=${get_latest_version "$(echo "$json_data" | jq -c '.versions.nightly')" "$version_filter" true)
                echo "version_latest=$latest_nightly"
            elif [ "$channel" = "release" ]; then
                latest_release=${get_latest_version "$(echo "$json_data" | jq -c '.versions.release')" "$version_filter" false)
                echo "version_latest=$latest_release"
            fi
        fi

    - name: Cache Blazium Editor
      if: ${{ inputs.download_editor == 'true' || inputs.use_cache == 'true' }}
      id: cache-editor
      uses: actions/cache@v3
      with:
        path: ${{ inputs.bin-path }}/editor
        key: ${{ runner.os }}-blazium-editor-${{ env.version_latest }}-${{ inputs.platform }}-${{ inputs.arch }}

    - name: Blazium Editor Download
      if: ${{ inputs.download_editor == 'true'}}
      shell: bash
      run: |
        echo "Runner os is ${{ runner.os }}"
        if [ "${{ runner.os }}" == "Linux" ]; then
          if [ "${{ inputs.platform }}" == "" ]; then
            platform=linux
          else
            platform=${{ inputs.platform }}
          fi
          if [ "${{ inputs.arch }}" == "" ]; then
            arch=x86_64
          else
            arch=${{ inputs.arch }}
          fi
        elif [ "${{ runner.os }}" == "Windows" ]; then
          if [ "${{ inputs.platform }}" == "" ]; then
            platform=windows
          else
            platform=${{ inputs.platform }}
          fi
          if [ "${{ inputs.arch }}" == "" ]; then
            arch=64bit
          else
            arch=${{ inputs.arch }}
          fi
        else
          if [ "${{ inputs.platform }}" == "" ]; then
            platform=macos
          else
            platform=${{ inputs.platform }}
          fi
          if [ "${{ inputs.arch }}" == "" ]; then
            arch=macos
          else
            arch=${{ inputs.arch }}
          fi
        fi
        if [ "${{ inputs.download_mono }}" == "true" ]; then
          mono=" --mono"
        else
          mono=""
        fi
        if [ "${{ steps.cache-editor.outputs.cache-hit }}" != "true" ]; then
          echo "Using platform $platform and arch $arch and mono $mono"
          mkdir -p ${{ inputs.bin-path }}/editor
          ${{ env.BLAZIUM_CLI }} --get-version ${{ env.version_latest }} --arch $arch --download --editor --platform $platform$mono ${{ inputs.bin-path }}/editor
          
          echo "Unzipping editor"
          # Unzip 1st time
          file=$(ls ${{ inputs.bin-path }}/editor)
          ls -lah ${{ inputs.bin-path }}/editor
          unzip ${{ inputs.bin-path }}/editor/$file -d ${{ inputs.bin-path }}/editor
          rm ${{ inputs.bin-path }}/editor/$file

          if [ "$platform" == "macos" ]; then
            # Unzip 2nd time
            file=$(ls ${{ inputs.bin-path }}//editor)
            unzip ${{ inputs.bin-path }}/editor/$file -d ${{ inputs.bin-path }}/editor
            rm ${{ inputs.bin-path }}/editor/$file
          fi
          # Move file
          if [ "$platform" == "linux" ]; then
            file=$(ls ${{ inputs.bin-path }}/editor)
            chmod +x ${{ inputs.bin-path }}/editor/$file
            # Rename it to Blazium
            mv ${{ inputs.bin-path }}/editor/$file ${{ inputs.bin-path }}/editor/Blazium
          elif [ "$platform" == "windows" ]; then
            # Find an executable that is NOT a .console.exe
            file=$(find "${{ inputs.bin-path }}/editor" -type f -name '*.exe' ! -name '*.console.exe' | head -n 1)
            # Rename to Blazium.exe
            mv $file ${{ inputs.bin-path }}/editor/Blazium.exe
            ls -lah ${{ inputs.bin-path }}/editor
          fi

        else
          echo "Using cached platform $platform and arch $arch and mono $mono"
          ls ${{ inputs.bin-path }}/editor
        fi
        
        # Add Blazium to PATH
        echo "${{ inputs.bin-path }}/editor" >> $GITHUB_PATH

        # Export Blazium Editor ENV
        if [ "$platform" == "macos" ]; then
          echo "${{ inputs.bin-path }}/editor/Blazium.app/Contents/MacOS" >> $GITHUB_PATH
          echo "BLAZIUM_EDITOR=${{ inputs.bin-path }}/editor/Blazium.app/Contents/MacOS/Blazium" >> $GITHUB_ENV
        elif [ "$platform" == "linux" ]; then
          echo "BLAZIUM_EDITOR=${{ inputs.bin-path }}/editor/Blazium" >> $GITHUB_ENV
        else
          echo "BLAZIUM_EDITOR=${{ inputs.bin-path }}/editor/Blazium.exe" >> $GITHUB_ENV
        fi

    - name: Verify Blazium Editor Installation
      shell: bash
      if: ${{ inputs.download_editor == 'true' }}
      run: |
        ${{ env.BLAZIUM_EDITOR }} --version

    - name: Cache Blazium Template
      if: ${{ inputs.download_template == 'true' && inputs.use_cache == 'true' }}
      id: cache-template
      uses: actions/cache@v3
      with:
        path: ${{ inputs.bin-path }}/templates
        key: ${{ runner.os }}-blazium-template-${{ env.version_latest }}-${{ inputs.platform }}-${{ inputs.arch }}
            
    - name: Blazium Template
      if: ${{ inputs.download_template == 'true' }}
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          if [ "${{ inputs.platform }}" == "" ]; then
            platform=linux
          else
            platform=${{ inputs.platform }}
          fi
          if [ "${{ inputs.arch }}" == "" ]; then
            arch=x86_64
          else
            arch=${{ inputs.arch }}
          fi
        elif [ "${{ runner.os }}" == "Windows" ]; then
          if [ "${{ inputs.platform }}" == "" ]; then
            platform=windows
          else
            platform=${{ inputs.platform }}
          fi
          if [ "${{ inputs.arch }}" == "" ]; then
            arch=x86_64
          else
            arch=${{ inputs.arch }}
          fi
        else
          if [ "${{ inputs.platform }}" == "" ]; then
            platform=macos
          else
            platform=${{ inputs.platform }}
          fi
          if [ "${{ inputs.arch }}" == "" ]; then
            arch=macos
          else
            arch=${{ inputs.arch }}
          fi
        fi
        if [ "${{ inputs.download_mono }}" == "true" ]; then
          mono=" --mono"
        else
          mono=""
        fi
        echo "Using platform $platform and arch $arch and mono $mono"

        mkdir -p ${{ inputs.bin-path }}/templates
        if [ "${{ steps.cache-template.outputs.cache-hit }}" != "true" ]; then
          ${{ env.BLAZIUM_CLI }} --get-version ${{ env.version_latest }} --arch $arch --download --template --platform $platform$mono ${{ inputs.bin-path }}/templates
        else
          echo "Using cached template"
          ls ${{ inputs.bin-path }}/templates
        fi
        file=$(ls ${{ inputs.bin-path }}/templates)
        # Replace - with .
        version_dot=$(echo "${{ env.version_latest }}" | sed 's/-/./')
        
        echo "Unzipping template"
        if [ "$platform" == "macos" ]; then
          mkdir -v -p "/Users/runner/Library/Application Support/Blazium/export_templates"
          unzip ${{ inputs.bin-path }}/templates/$file -d "/Users/runner/Library/Application Support/Blazium/export_templates/$version_dot"
          ls "/Users/runner/Library/Application Support/Blazium/export_templates/$version_dot"
          echo "BLAZIUM_TEMPLATE=\"/Users/runner/Library/Application Support/Blazium/export_templates/$version_dot\"" >> $GITHUB_ENV
        elif [ "$platform" == "linux" ]; then
          mkdir -v -p $HOME/.local/share/blazium/export_templates
          unzip ${{ inputs.bin-path }}/templates/$file -d $HOME/.local/share/blazium/export_templates/$version_dot
          ls $HOME/.local/share/blazium/export_templates/$version_dot
          echo "BLAZIUM_TEMPLATE=$HOME/.local/share/blazium/export_templates/$version_dot" >> $GITHUB_ENV
        else
          mkdir -v -p "$HOME/AppData/Roaming/Blazium/export_templates"
          unzip ${{ inputs.bin-path }}/templates/$file -d "$HOME/AppData/Roaming/Blazium/export_templates/$version_dot"
          ls "$HOME/AppData/Roaming/Blazium/export_templates/$version_dot"
          echo "BLAZIUM_TEMPLATE=\"$HOME/AppData/Roaming/Blazium/export_templates/$version_dot\"" >> $GITHUB_ENV
        fi

